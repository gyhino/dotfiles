[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'gorodinskiy/vim-coloresque'

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'vim-scripts/PDV--phpDocumentor-for-Vim'
on_ft = 'php'
hook_source = '''
let g:pdv_cfg_Package   = ""
let g:pdv_cfg_Version   = ""
let g:pdv_cfg_Author    = "Yoshiyuki HINO <yhinoz@gmail.com>"
let g:pdv_cfg_Copyright = "(c) yhino."
let g:pdv_cfg_License   = "MIT"
'''
hook_add = '''
inoremap <C-p> <ESC>:call PhpDocSingle()<CR>i
nnoremap <C-p> :call PhpDocSingle()<CR>
vnoremap <C-p> :call PhpDocRange()<CR>
'''

[[plugins]]
repo = 'chrisbra/vim-diff-enhanced'
on_ft = 'diff'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
            \   'active': {
            \       'left': [ [ 'mode', 'paste' ], ['readonly', 'filename', 'modified' ], [ 'fugitive' ] ],
            \       'right': [ [ 'lineinfo' ], [ 'percent' ], [ 'ale', 'fileformat', 'fileencoding', 'filetype' ] ]
            \   },
            \   'inactive': {
            \       'left': [ [ 'readonly', 'filename', 'modified' ], [ 'fugitive' ] ]
            \   },
            \   'component': {
            \       'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}'
            \   },
            \   'component_visible_condition': {
            \       'fugitive': '(exists("*figitive#head") && ""!=fugitive#head())'
            \   },
            \   'component_function': {
            \       'ale': 'LLAle'
            \   }
            \ }

function! LLAle()
    if dein#tap('ale')
        let l:count = ale#statusline#Count(bufnr(''))
        let l:errors = l:count.error + l:count.style_error
        let l:warnings = l:count.warning + l:count.style_warning
        return l:count.total == 0 ? '' : 'E:' . l:errors . ' W:' . l:warnings
    else
        return ''
    endif
endfunction
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'h1mesuke/vim-alignta'

[[plugins]]
repo = 'vim-scripts/L9'

[[plugins]]
repo = 'vim-scripts/sudo.vim'

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
nmap <silent> <F4> :TagbarToggle<CR>
let g:tagbar_autofocus = 1

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [  'p:package', 'i:imports:1', 'c:constants', 'v:variables',
        \ 't:types',  'n:interfaces', 'w:fields', 'e:embedded', 'm:methods',
        \ 'r:constructor', 'f:functions' ],
    \ 'sro' : '.',
    \ 'kind2scope' : { 't' : 'ctype', 'n' : 'ntype' },
    \ 'scope2kind' : { 'ctype' : 't', 'ntype' : 'n' },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
    \ }

let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
\ }
'''

[[plugins]]
repo = 'ludovicchabant/vim-gutentags'
hook_add = '''
let g:gutentags_ctags_tagfile = '.git/ctags'
'''

[[plugins]]
repo = 'altercation/vim-colors-solarized'

[[plugins]]
repo = 'kassio/neoterm'
if = "has('nvim')"
hook_add = '''
    tnoremap <silent> <ESC> <C-\><C-n>
    nnoremap <silent> ,rc :TREPLSendFile<cr>
    nnoremap <silent> ,rl :TREPLSendLine<cr>
    vnoremap <silent> ,rl :TREPLSendSelection<cr>
    nnoremap <silent> vt :Ttoggle<cr>
    nnoremap <silent> vs :terminal<cr>
'''

[[plugins]]
repo = 'roxma/nvim-yarp'
if = "!has('nvim')"

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = "!has('nvim')"

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_sign_column_always = 1
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = get(g:, 'quickrun_config', {})
if executable('python3')
    let g:quickrun_config.python = { 'command': 'python3' }
endif
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'davidhalter/jedi-vim'
hook_add = '''
let g:jedi#rename_command = '<leader>R'
autocmd FileType python let b:did_ftplugin = 1
autocmd FileType python setlocal completeopt-=preview
'''
on_ft = 'python'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'

[[plugins]]
repo = 'nsf/gocode'
rtp = 'vim'
on_ft = 'go'

[[plugins]]
repo = 'rust-lang/rust.vim'
hook_add = '''
let g:rustfmt_autosave = 1
'''
on_ft = 'rust'

[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
" for jsx
let g:jsx_ext_required = 1
let g:jsx_pragma_required = 1
'''
